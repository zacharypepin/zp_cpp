#include <gtest/gtest.h>
#include "zp_cpp/uuid.hpp"

#include <stdexcept>
#include <unordered_set>

// =========================================================================================================================================
// =========================================================================================================================================
// GenerateProducesNonNil: Validates generated UUIDs are not equal to the nil sentinel value.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(UuidTest, GenerateProducesNonNil)
{
    auto id = zp::uuid::generate();
    EXPECT_NE(id, zp::uuid::nil);
}

// =========================================================================================================================================
// =========================================================================================================================================
// StringRoundTrip: Confirms to_str() and from_str() perform a lossless round-trip conversion.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(UuidTest, StringRoundTrip)
{
    auto original  = zp::uuid::generate();
    auto as_string = zp::uuid::to_str(original);
    auto parsed    = zp::uuid::from_str(as_string);

    EXPECT_EQ(parsed, original);
}

// =========================================================================================================================================
// =========================================================================================================================================
// StringFormat: Ensures UUID strings follow the canonical 8-4-4-4-12 lowercase hexadecimal layout.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(UuidTest, StringFormat)
{
    auto id        = zp::uuid::generate();
    auto as_string = zp::uuid::to_str(id);

    EXPECT_EQ(as_string.size(), 36u);
    EXPECT_EQ(as_string[8], '-');
    EXPECT_EQ(as_string[13], '-');
    EXPECT_EQ(as_string[18], '-');
    EXPECT_EQ(as_string[23], '-');

    for (size_t i = 0; i < as_string.size(); ++i)
    {
        if (as_string[i] == '-')
        {
            continue;
        }

        EXPECT_TRUE((as_string[i] >= '0' && as_string[i] <= '9') || (as_string[i] >= 'a' && as_string[i] <= 'f'));
    }
}

// =========================================================================================================================================
// =========================================================================================================================================
// HashWorksInUnorderedContainers: Verifies std::hash specialization enables unordered_set usage.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(UuidTest, HashWorksInUnorderedContainers)
{
    auto id = zp::uuid::generate();

    std::unordered_set<zp::uuid::uuid> ids;
    ids.insert(id);

    EXPECT_EQ(ids.count(id), 1u);
}

// =========================================================================================================================================
// =========================================================================================================================================
// FromStringThrowsOnInvalidInput: Confirms from_str() rejects malformed UUID strings via exceptions.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(UuidTest, FromStringThrowsOnInvalidInput)
{
    EXPECT_THROW(zp::uuid::from_str("invalid-uuid"), std::invalid_argument);
}
