#include <gtest/gtest.h>
#include "zp_cpp/core.hpp"
#include "zp_cpp/time.hpp"
#include <thread>
#include <chrono>

// =========================================================================================================================================
// =========================================================================================================================================
// MibConversion: Validates mib() utility converts megabytes to bytes correctly.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CoreUnitTest, MibConversion)
{
    EXPECT_EQ(zp::mib(1), 1024ULL * 1024ULL);
    EXPECT_EQ(zp::mib(0), 0ULL);
    EXPECT_EQ(zp::mib(5), 5 * 1024ULL * 1024ULL);
}

// =========================================================================================================================================
// =========================================================================================================================================
// TimeNow: Validates now() returns monotonically increasing nanosecond timestamps.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CoreUnitTest, TimeNow)
{
    auto t1 = zp::now();
    std::this_thread::sleep_for(std::chrono::milliseconds(10));
    auto t2 = zp::now();

    EXPECT_GT(t2, t1);
    EXPECT_GT(t2 - t1, 0ULL);
}

// =========================================================================================================================================
// =========================================================================================================================================
// CalcInterp: Validates calc_interp() produces correct interpolation factors for cyclic animations.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CoreUnitTest, CalcInterp)
{
    zp::ens started = 1000;
    zp::ens dur     = 1000;

    EXPECT_FLOAT_EQ(zp::calc_interp(started, started, dur), 0.0f);
    EXPECT_FLOAT_EQ(zp::calc_interp(started, started + 500, dur), 0.5f);
    EXPECT_FLOAT_EQ(zp::calc_interp(started, started + dur, dur), 0.0f);
    EXPECT_FLOAT_EQ(zp::calc_interp(started, started + dur + 250, dur), 0.25f);
}
