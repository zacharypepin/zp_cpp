#include <gtest/gtest.h>
#include "zp_cpp/core.hpp"
#include "zp_cpp/cli.hpp"

// =========================================================================================================================================
// =========================================================================================================================================
// EmptyArgs: Validates parse_cli() returns empty map for no arguments.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CliTest, EmptyArgs)
{
    char* argv[] = {(char*)"program"};
    auto result  = zp::cli::parse_cli(1, argv);

    EXPECT_TRUE(result.empty());
}

// =========================================================================================================================================
// =========================================================================================================================================
// SingleFlag: Validates parse_cli() parses single flag in --key=value format.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CliTest, SingleFlag)
{
    char* argv[] = {(char*)"program", (char*)"--verbose="};
    auto result  = zp::cli::parse_cli(2, argv);

    EXPECT_EQ(result.size(), 1);
    EXPECT_EQ(result["verbose"], "");
}

// =========================================================================================================================================
// =========================================================================================================================================
// FlagWithValue: Validates parse_cli() parses flag with value.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CliTest, FlagWithValue)
{
    char* argv[] = {(char*)"program", (char*)"--config=config.txt"};
    auto result  = zp::cli::parse_cli(2, argv);

    EXPECT_EQ(result.size(), 1);
    EXPECT_EQ(result["config"], "config.txt");
}

// =========================================================================================================================================
// =========================================================================================================================================
// MultipleFlagsAndValues: Validates parse_cli() parses multiple flags correctly.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CliTest, MultipleFlagsAndValues)
{
    char* argv[] = {(char*)"program", (char*)"--verbose=", (char*)"--output=out.txt", (char*)"--count=42"};
    auto result  = zp::cli::parse_cli(4, argv);

    EXPECT_EQ(result.size(), 3);
    EXPECT_EQ(result["verbose"], "");
    EXPECT_EQ(result["output"], "out.txt");
    EXPECT_EQ(result["count"], "42");
}

// =========================================================================================================================================
// =========================================================================================================================================
// IgnoresShortDashArguments: Validates parse_cli() ignores short dash arguments without dereferencing out of bounds.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(CliTest, IgnoresShortDashArguments)
{
    char* argv[] = {(char*)"program", (char*)"-v", (char*)"-", (char*)""};
    auto result  = zp::cli::parse_cli(4, argv);

    EXPECT_TRUE(result.empty());
}
