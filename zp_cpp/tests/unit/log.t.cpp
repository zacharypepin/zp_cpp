#include <gtest/gtest.h>
#include "zp_cpp/log.hpp"
#include "../cmn.hpp"
#include <fstream>
#include <filesystem>
#include <regex>

// =========================================================================================================================================
// =========================================================================================================================================
// LoggerBasicFunctionality: Tests basic logging functionality including file creation and message writing.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(LoggerTest, BasicFunctionality)
{
    const std::filesystem::path test_log_file = "test_basic.log";

    // =================================================================================================
    // =================================================================================================
    // Clean up any existing test log file and initialize logger.
    // =================================================================================================
    // =================================================================================================
    {
        std::filesystem::remove(test_log_file);
        zp::log::Logger logger = {};
        zp::log::init(&logger, test_log_file);
    }

    // =================================================================================================
    // =================================================================================================
    // Test basic logging at different levels.
    // =================================================================================================
    // =================================================================================================
    {
        zp::log::Logger logger = {};
        zp::log::init(&logger, test_log_file);

        ZP_LOG_INFO(&logger, "Test info message");
        ZP_LOG_WARN(&logger, "Test warning message");
        ZP_LOG_ERROR(&logger, "Test error message");

        zp::log::cleanup(&logger);
    }

    // =================================================================================================
    // =================================================================================================
    // Verify log file was created and contains expected content.
    // =================================================================================================
    // =================================================================================================
    {
        EXPECT_TRUE(std::filesystem::exists(test_log_file));

        std::ifstream log_file(test_log_file);
        std::string content((std::istreambuf_iterator<char>(log_file)), std::istreambuf_iterator<char>());

        EXPECT_TRUE(content.find("Test info message") != std::string::npos);
        EXPECT_TRUE(content.find("Test warning message") != std::string::npos);
        EXPECT_TRUE(content.find("Test error message") != std::string::npos);
    }

    std::filesystem::remove(test_log_file);
}

// =========================================================================================================================================
// =========================================================================================================================================
// LoggerTimestampFormatting: Tests that timestamps are properly formatted in log messages.
// =========================================================================================================================================
// =========================================================================================================================================
TEST(LoggerTest, TimestampFormatting)
{
    const std::filesystem::path test_log_file = "test_timestamps.log";

    // =================================================================================================
    // =================================================================================================
    // Clean up and initialize logger.
    // =================================================================================================
    // =================================================================================================
    {
        std::filesystem::remove(test_log_file);
        zp::log::Logger logger = {};
        zp::log::init(&logger, test_log_file);
    }

    // =================================================================================================
    // =================================================================================================
    // Log a message and capture the timestamp.
    // =================================================================================================
    // =================================================================================================
    {
        zp::log::Logger logger = {};
        zp::log::init(&logger, test_log_file);

        ZP_LOG_INFO(&logger, "Timestamp test message");

        zp::log::cleanup(&logger);
    }

    // =================================================================================================
    // =================================================================================================
    // Verify that timestamp is properly formatted.
    // =================================================================================================
    // =================================================================================================
    {
        std::ifstream log_file(test_log_file);
        std::string content((std::istreambuf_iterator<char>(log_file)), std::istreambuf_iterator<char>());

        // Check for timestamp pattern: YYYY-MM-DD HH:MM:SS
        std::regex timestamp_pattern(R"(\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\])");
        EXPECT_TRUE(std::regex_search(content, timestamp_pattern));

        EXPECT_TRUE(content.find("Timestamp test message") != std::string::npos);
    }

    std::filesystem::remove(test_log_file);
}