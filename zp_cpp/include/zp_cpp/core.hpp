#pragma once

#include <cstdint>
#include <cstring>
#include <string>
#include <cassert>
#include <cstdio>

// ========================================================================================================================================
// ========================================================================================================================================
// ========================================================================================================================================
// ========================================================================================================================================
#define ZC_ASSERT(expr) \
    do { \
        auto const _r = (expr); \
        if (_r != ::zp::Result::ZC_SUCCESS) \
        { \
            std::fprintf(stderr, "ZC_ASSERT failed: %s returned %d at %s:%d\n", #expr, static_cast<int>(_r), __FILE__, __LINE__); \
            assert(false); \
            std::abort(); \
        } \
    } while (0)

// ========================================================================================================================================
// ========================================================================================================================================
// ========================================================================================================================================
// ========================================================================================================================================
namespace zp
{
    enum class Result
    {
        ZC_SUCCESS           = 0,
        ZC_OUT_OF_BOUNDS     = -1,
        ZC_FILE_NOT_FOUND    = -2,
        ZC_FILE_ACCESS_ERROR = -3,
        ZC_FILE_READ_ERROR   = -4,
        ZC_FILE_WRITE_ERROR  = -5,
    };

    constexpr size_t mib(size_t m) noexcept
    {
        return m * 1024ULL * 1024ULL;
    }
}
