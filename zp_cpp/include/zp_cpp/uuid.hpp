#pragma once

#include <cstddef>
#include <cstdint>
#include <cstring>
#include <functional>
#include <string>

namespace zp::uuid
{
    struct uuid
    {
        std::byte bytes[16];

        // =========================================================================================================================================
        // =========================================================================================================================================
        // operator==: Compares two UUIDs byte-by-byte for equality.
        // =========================================================================================================================================
        // =========================================================================================================================================
        bool operator==(const uuid& other) const noexcept;

        // =========================================================================================================================================
        // =========================================================================================================================================
        // operator!=: Negates operator== to determine inequality between UUIDs.
        // =========================================================================================================================================
        // =========================================================================================================================================
        bool operator!=(const uuid& other) const noexcept;
    };

    inline constexpr uuid nil{};

    // =========================================================================================================================================
    // =========================================================================================================================================
    // generate: Produces a version 4 (random) RFC 4122 UUID.
    // =========================================================================================================================================
    // =========================================================================================================================================
    uuid generate();

    // =========================================================================================================================================
    // =========================================================================================================================================
    // to_str: Converts a UUID into its canonical lowercase hexadecimal string representation.
    // =========================================================================================================================================
    // =========================================================================================================================================
    std::string to_str(const uuid& value);

    // =========================================================================================================================================
    // =========================================================================================================================================
    // from_str: Parses a canonical lowercase hexadecimal UUID string into its binary representation.
    // =========================================================================================================================================
    // =========================================================================================================================================
    uuid from_str(const std::string& value);
}

namespace std
{
    template <> struct hash<zp::uuid::uuid>
    {
        // =========================================================================================================================================
        // =========================================================================================================================================
        // operator(): Hashes a UUID by XOR'ing its two 64-bit halves for use in unordered containers.
        // =========================================================================================================================================
        // =========================================================================================================================================
        size_t operator()(const zp::uuid::uuid& id) const noexcept;
    };
}
