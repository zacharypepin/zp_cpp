#include "zp_cpp/gpu.hpp"

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
void zp::gpu::StagedDeviceBuff4::init(VkDevice device, VkPhysicalDevice phys_dev, size_t stride, uint32_t max_count, VkBufferUsageFlags usage)
{
    this->stride    = stride;
    this->max_count = max_count;
    util::create_buff(device, phys_dev, max_count * stride, usage, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, handle, memory);
    if (usage & VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT)
    {
        deviceAddress = util::get_buff_dev_addr(device, handle);
    }
    vkMapMemory(device, memory, 0, max_count * stride, 0, &p_mapped_device);
    count = 0;
    staging_buff.resize(max_count * stride);
    p_mapped = staging_buff.data();
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
zp::gpu::RegionHandle zp::gpu::StagedDeviceBuff4::bump(uint32_t num)
{
    uint32_t new_count = count + num;
    if (new_count >= max_count)
    {
        ERR("pushed past bounds: (" << new_count << " >= " << max_count << ")");
    }

    RegionHandle region = {.ptr = p_mapped + count * stride, .start_idx = count, .count = num};
    count               = new_count;
    return region;
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
zp::gpu::RegionHandle zp::gpu::StagedDeviceBuff4::push(std::byte* src, uint32_t num)
{
    uint32_t new_count = count + num;
    if (new_count >= max_count)
    {
        ERR("pushed past bounds: (" << new_count << " >= " << max_count << ")");
    }

    std::byte* p_region = p_mapped + count * stride;
    memcpy(p_region, src, num * stride);

    RegionHandle region = {.ptr = p_region, .start_idx = count, .count = num};
    count               = new_count;
    return region;
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
void zp::gpu::StagedDeviceBuff4::remove(RegionHandle region)
{
    TODO("removing regions");
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
void zp::gpu::StagedDeviceBuff4::push_device()
{
    memcpy(p_mapped_device, staging_buff.data(), count * stride);
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
size_t zp::gpu::StagedDeviceBuff4::size()
{
    return max_count * stride;
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
VkDescriptorBufferInfo zp::gpu::StagedDeviceBuff4::desc_info()
{
    VkDescriptorBufferInfo desc_info = {};
    desc_info.buffer                 = handle;
    desc_info.offset                 = 0;
    desc_info.range                  = size();

    return desc_info;
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
void zp::gpu::StagedDeviceBuff4::reset()
{
    count = 0;
}

// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
// ====================================================================================================================
void zp::gpu::StagedDeviceBuff4::cleanup(VkDevice device)
{
    reset();
    vkDestroyBuffer(device, handle, nullptr);
    vkFreeMemory(device, memory, nullptr);
}