#include "zp_cpp/log.hpp"
#include <iostream>
#include <filesystem>
#include <chrono>
#include <ctime>
#include <iomanip>
#include <sstream>

// =========================================================================================================================================
// =========================================================================================================================================
// init: Initializes a logger instance with specified configuration.
// =========================================================================================================================================
// =========================================================================================================================================
void zp::log::init(Logger* logger, const std::filesystem::path& file_path)
{
    // =================================================================================================
    // =================================================================================================
    // Shutdown existing logger if one exists before creating new one.
    // =================================================================================================
    // =================================================================================================
    {
        if (logger->initialised)
        {
            zp::log::cleanup(logger);
        }
    }

    // =================================================================================================
    // =================================================================================================
    // Initialize logger struct with provided parameters.
    // =================================================================================================
    // =================================================================================================
    {
        logger->file_path   = file_path;
        logger->initialised = true;
    }

    // =================================================================================================
    // =================================================================================================
    // Ensure log directory exists and open file stream.
    // =================================================================================================
    // =================================================================================================
    {
        std::filesystem::path log_dir = logger->file_path.parent_path();

        if (!log_dir.empty() && !std::filesystem::exists(log_dir))
        {
            std::filesystem::create_directories(log_dir);
        }

        logger->file_stream.open(logger->file_path, std::ios::app);
        if (!logger->file_stream.is_open())
        {
            std::cerr << "Failed to open log file: " << logger->file_path << std::endl;
        }
    }
}

// =========================================================================================================================================
// =========================================================================================================================================
// cleanup: Properly cleans up a logger instance.
// =========================================================================================================================================
// =========================================================================================================================================
void zp::log::cleanup(Logger* logger)
{
    // =================================================================================================
    // =================================================================================================
    // Close file stream and reset logger state.
    // =================================================================================================
    // =================================================================================================
    {
        if (logger->initialised)
        {
            logger->file_stream.close();
            logger->initialised = false;
        }
    }
}

// =========================================================================================================================================
// =========================================================================================================================================
// log: Writes a log message with the specified level and message content.
// =========================================================================================================================================
// =========================================================================================================================================
void zp::log::log(Logger* logger, Logger::Level level, const std::string& message)
{
    std::lock_guard<std::mutex> lock(logger->log_mutex);

    // =================================================================================================
    // =================================================================================================
    // Format and write message to file.
    // =================================================================================================
    // =================================================================================================
    {
        if (logger->file_stream.is_open())
        {
            auto now               = std::chrono::system_clock::now();
            std::time_t time_t_now = std::chrono::system_clock::to_time_t(now);
            std::tm tm_now;

#if defined(_WIN32) || defined(_WIN64)
            localtime_s(&tm_now, &time_t_now);
#else
            localtime_r(&time_t_now, &tm_now);
#endif

            std::ostringstream oss;
            oss << "[" << std::put_time(&tm_now, "%Y-%m-%d %H:%M:%S") << "] ";

            switch (level)
            {
                case Logger::INFO:  oss << "[INFO ] "; break;
                case Logger::WARN:  oss << "[WARN ] "; break;
                case Logger::ERROR: oss << "[ERROR] "; break;
            }

            oss << message;

            logger->file_stream << oss.str() << std::endl;
            logger->file_stream.flush();
        }
    }
}